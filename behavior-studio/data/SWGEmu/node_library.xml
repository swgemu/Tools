<?xml version='1.0' encoding='utf-8'?>
<LibData version="1.3.0">
  <!-- ====================================================================================================================== -->
  <library name="SWGEmuNodes">
    <!-- ********************************************************************************************************* -->
    <!-- TASKS -->
    <node class="Task" type="Decorator" name="AlwaysFail">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Executes its child and fails regardless of the result."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="AlwaysSucceed">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Executes its child and succeeds regardless of the result."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="CalculateAggroMod">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Uses targetProspect from the blackboard to calculate the aggroMod and write it to the blackboard. Fails if targetProspect isn't available or if aggroMod fails to write."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="CallForHelp">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Sets AI to path to nearby Ally and notifyPackMobs"/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="CompleteMove">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Internally sets the next position calculated from last called FindNextPosition. Intended to be called at the end of the update cycle because future position is calculated in FindNetPosition. Will currently always succeed."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="ContrabandScan">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Attempts to run Contraband scan on prospect target."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="DroidHarvest">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Harvest corpse of killed created by player for resources."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="DropProspectFromDefenders">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Checks blackboard for targetProspect and drops it from the defender list. Also erases targetProspect regardless of result. Fails if targetProspect remains a defender."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="Dummy">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Does nothing -- always returns SUCCESS. Useful as a child to an AlwaysXX Decorator."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="EnqueueAttack">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Attempts to enqueue the selected attack. Will fail if there is no follow object to target."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="EquipStagedWeapon">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Attempts to equip weapon stored as stageWeapon on blackboard. Fails only if entry does not exist."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="EraseBlackboard">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Erases a key from the blackboard. Always succeeds."/>
      <shape name="ring"/>
      <events/>
      <attribute type="string" name="param" description="Key to store on the blackboard."/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="Evade">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Random chance to generate a random patrol point within the agent weapon's max aggro range around its target if the agent is not melee only."/>
      <shape name="ring"/>
      <events/>
      <attribute type="float" name="maxEvadeChance" description="Maximum chance (0 to 1.0) for the agent to generate a random evade patrol point."/>
      <attribute type="float" name="minEvadeChance" description="Minimum chance (0 to 1.0) for the agent to generate a random evade patrol point."/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="ExitCombat">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Attempts to remove self from combat. Fails if still in combat after attempt."/>
      <shape name="ring"/>
      <events/>
      <attribute type="bool" name="clearDefenders" default="True" description="Clear defender list when attempting to exit combat?"/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="FindNextPosition">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Reads the blackboard for moveMode of WALK or RUN (default of WALK) and initiates the movement cycle. Will return RUNNING until the destination is reached, and SUCCESS when it is complete."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="Flee">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="AI Flee action. Always succeeds. Delay codition is until next check in seconds."/>
      <shape name="ring"/>
      <events/>
      <attribute type="int" name="delay" description=""/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="FollowSquadLeader">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="This leaf task will check for an observer and attempt to follow the first agent listed on the observer list."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="GeneratePatrol">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Generates a patrol using the given arguments. Fails if the patrol failed to generate."/>
      <shape name="ring"/>
      <events/>
      <attribute type="float" name="distFromHome" description="Furthest distance from home location to patrol."/>
      <attribute type="int" name="numPoints" description="An integer number of patrol points to generate."/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="GetHealTarget">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Finds a healable target from the targets defender list."/>
      <shape name="ring"/>
      <events/>
      <attribute type="float" name="range" default="60.0" description=""/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="GetProspectFromCommand">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Updates targetProspect on the blackboard with the target of the last pet command. Value is erased if failure. Succeeds if self is pet and new target was found and written to blackboard."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="GetProspectFromDefenders">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Updates targetProspect on the blackboard with the main defender. Value is erased if failure. Succeeds if new target was found and written to blackboard."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="GetProspectFromTarget">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Updates targetProspect on the blackboard with the target of the follow object. Value is erased if failure. Succeeds if new target was found and written to blackboard."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="GetProspectFromThreatMap">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Updates targetProspect on the blackboard with a target from the threat map. Value is erased if failure. Succeeds if new target was found and written to blackboard."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="HealTarget">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Executes heal action on chosen heal target."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="If">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Just passes the result of the child."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="KillProspect">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Checks passed to follow incapacitated player and kill when in range."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="Leash">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Calls the leash logic. Always succeeds."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="LookForAllies">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Checks close objects for allies of the Agent."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="LookForPlayer">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Finds and sets a PLAYER target for use in the child. \n  \n Tries multiple target prospects until a non-failure result is returned and returns that result. If no non-failures are returned or no targets are found, failure is returned."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="LookForTarget">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Finds and sets a target for use in the child. Tries multiple target prospects until a non-failure result is returned and returns that result. If no non-failures are returned or no targets are found, failure is returned."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="Not">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Executes its child and returns the opposite of the result -- SUCCESS -&gt; FAILURE or FAILURE -&gt; SUCCESS. Any other result is passed transparently."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Composite" name="ParallelSelector">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Tries to execute all of its children simultaneously. If all of the children fail, then ParallelSelector fails too."/>
      <shape name="parallel_selector"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Composite" name="ParallelSequence">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Tries to execute all of its children simultaneously. If any child fails then ParallelSequence fails too."/>
      <shape name="parallel_sequence"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="PetReturn">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="For pets: This function will set their follow object to the player that gave them their last command."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="PetSelectWeapon" creator="Hakry">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Selects either ranged or melee pet weapon depending on the toggle useRanged."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Composite" name="RandomSelector">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Tries to execute a random child and if it finishes with state SUCCESS then RandomSelector finishes with state SUCCESS too. Otherwise, it selects another (unselected) child and launches it, and so on. If all children fail then RandomSelector fails too."/>
      <shape name="random_selector"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Composite" name="RandomSequence">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Tries to execute a random child and if it finishes with SUCCESS, then tries to execute another (unselected) child, and so on. If any child fails then RandomSequence fails too."/>
      <shape name="random_sequence"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="Rest">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Puts the creature AI into a resting position."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="RestoreFollow">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Attempts to restore a stored follow object. Fails if follow object ends up empty."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="RestorePetPatrols">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Adds the pet patrol points back to the pet if the control device has any stored."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="RunAway">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Runs distance dist modified by aggro radius and aggroMod (from blackboard) away from targetProspect on blackboard. Fails only if targetProspect isn't available."/>
      <shape name="ring"/>
      <events/>
      <attribute type="int" name="delay" default="15" min="15" max="90" description=""/>
      <attribute type="float" name="dist" description="Distance to run."/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="SelectAttack">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Reads attackType from blackboard to select an attack to use. If attackType is DEFAULT, attempt to select a default attack. If attackType is RANDOM, attempt to select a special attack. If attackType is not written on the blackboard, use the attackNum (default of -1) to attempt a selection. Succeeds if an attack was set."/>
      <shape name="ring"/>
      <events/>
      <attribute type="int" name="attackNum" description="Optional specification for attackNum"/>
    </node>
    <!---->
    <node class="Task" type="Composite" name="Selector">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Tries to execute the first child and if it finishes with state SUCCESS then Selector finishes with state SUCCESS too. Otherwise, it selects the next child and launches it, and so on. If all children fail then Selector fails too."/>
      <shape name="selector"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="SendChatGreeting">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Send the Hi or Bye chat reactions."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Composite" name="Sequence">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Tries to execute the first child and if it finishes with SUCCESS, then tries to execute the next child, and so on. If any child fails then Sequence fails too."/>
      <shape name="sequence"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="SetAlert">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Sets self to be alert for duration. Always succeeds."/>
      <shape name="ring"/>
      <events/>
      <attribute type="float" name="duration" description="Seconds to be alert. Should be positive."/>
      <attribute type="text" name="show" default="false" description="Show alert flytext?"/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="SetAttackPosture">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Chance to set AIs attack posture."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="SetDefenderFromProspect">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Sets the main defender to the targetProspect from the blackboard. Fails if there is no targetProspect, or it fails to be set to the main defender."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="SetMovementState">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Sets the movement state to state. Fails if targetProspect is not written to the blackboard and tries to set movement state."/>
      <shape name="ring"/>
      <events/>
      <attribute type="text" name="state" default="OBLIVIOUS" available="OBLIVIOUS;WATCHING;STALKING;FOLLOWING;PATROLLING;FLEEING;LEASHING;EVADING;PATHING_HOME;FOLLOW_FORMATION;MOVING_TO_HEAL;NOTIFY_ALLY;CRACKDOWN_SCANNING;RESTING;LAIR_HEALING" description="Follow state enumerations."/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="StageRangedWeapon">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Stages the pets ranged weapon."/>
      <shape name="ring"/>
      <events/>
      <attribute type="text" name="val" description=""/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="StalkProspect">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="New node created by user."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="StopResting">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Ends the creatures rest period."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="TreeSocket">
      <children class="Task" use="yes"/>
      <children class="Condition" use="no"/>
      <description text="Holds modular reference to entire tree."/>
      <shape name="hexagon"/>
      <events/>
      <attribute type="text" name="slot" default="NONE" available="NONE|NONE;AWARE;KILL;IDLE;ATTACK;EQUIP;TARGET;MOVE;LOOKAT;AGGRO;SCARE;STALK;CRACKDOWNSCAN;HEAL;CHATREACTION;NOTIFYHELP;HARVEST" description=""/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="UntilFailure">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Executes its child repeatedly until the child fails, and then returns the non-successful result."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Decorator" name="UntilSuccess">
      <children class="Task" use="yes"/>
      <children class="Condition" use="yes"/>
      <description text="Executes its child repeatedly until the child doesn't fail and returns the non-failure result."/>
      <shape name="triangle"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="UpdateRangeToFollow">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Writes followRange to the blackboard. Fails if there is no follow object."/>
      <shape name="ring"/>
      <events/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="Wait">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Attempts to set a wait for the duration. Implicitly writes isWaiting of true to blackboard, and erases it when called again and completed. Returns RUNNING while waiting and SUCCESS once the wait has completed."/>
      <shape name="ring"/>
      <events/>
      <attribute type="float" name="duration" description="Seconds to wait. A negative value means indefinite."/>
    </node>
    <!---->
    <node class="Task" type="Leaf" name="WriteBlackboard">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Writes a key/value pair to the blackboard. Always succeeds."/>
      <shape name="ring"/>
      <events/>
      <attribute type="string" name="key" description="Key to store on the blackboard."/>
      <attribute type="text" name="val" description="Value to store under key -- this should be an available enum value. TODO -- add all available enumerations?"/>
    </node>
    <!---->
    <!-- ********************************************************************************************************* -->
    <!-- CONDITIONS -->
    <node class="Condition" type="Single" name="CheckAggroDelayPast">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check if the time the agent delays aggro after an alert trigger has past."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckAttackInRange">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks that the follow object is in the set attack's maximum range (taking into account weapon range)."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckAttackIsValid">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks that the set attack is valid."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckCallForHelp">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if AI timer has passed to call for help."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckChatDelay">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if AI chat delay has passed."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckCrackdownFollowTarget">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks the follow target for crackdown tree to make sure the follow target is not null or dead."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckCrackdownScanner">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns true if AI has SCANNING_FOR_CONTRABAND bitmask."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckDestination">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check is in range {x} from destination."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="float" name="condition" description="Check distance for destination."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckFlee">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check is AI should FLEE when their HAM drops below the given condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="float" name="condition" description=""/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckFollowAggression">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if follow is aggressive to self."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckFollowClosestIdealRange">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if the condition's ideal range is greater than the followRange written to the blackboard."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="PRIMARYWEAPON" available="PRIMARYWEAPON;SECONDARYWEAPON" description="Weapon enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckFollowHasState">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if the follow object's creature state is the same as condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="PEACE" available="INVALID;COVER;COMBAT;PEACE;AIMING;ALERT;BERSERK;FEIGNDEATH;COMBATATTITUDEEVASIVE;COMBATATTITUDENORMAL;COMBATATTITUDEAGGRESSIVE;TUMBLING;RALLIED;STUNNED;BLINDED;DIZZYINTIMIDATED;IMMOBILIZED;FROZEN;SWIMMING;SITTINGONCHAIR;CRAFTING;GLOWINGJEDI;MASKSCENT;POISONED;BLEEDING;DISEASED;ONFIRE;RIDINGMOUNT;MOUNTEDCREATURE;PILOTINGSHIP;SHIPOPERATIONS;SHIPGUNNER;SHIPINTERIOR;PILOTINGPOBSHIP" description="Creature state enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckFollowInWeaponRange">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if the condition's maximum range is greater than the followRange written to the blackboard."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="PRIMARYWEAPON" available="PRIMARYWEAPON;SECONDARYWEAPON" description="Weapon enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckFollowPosture">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if follow posture is the same as condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="UPRIGHT" available="INVALID;UPRIGHT;CROUCHED;PRONE;SNEAKING;BLOCKING;CLIMBING;FLYING;LYINGDOWN;SITTING;SKILLANIMATING;DRIVINGVEHICLE;RIDINGCREATURE;KNOCKEDDOWN;INCAPACITATED;DEAD" description="Posture enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHasFollow">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if the follow object exists."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHasHarvestTargets">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHasMeleeWeapon">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if the agent has a melee weapon."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHasPatrol">
      <children class="Task" use="no"/>
      <children class="Condition" use="no"/>
      <description text="Checks to see if self has any patrol points defined."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHasRangedWeapon">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if the agent has a ranged weapon."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHealChance">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks that the heal timer has passed and rolls chance to heal."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckHomeIsCell">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check is the AI's home location is in a cell."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsCamouflaged">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if the prospect target is camouflaged."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsDroid">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns true if agent is droid."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsEscort">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsHarvester">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsHealer">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks for the healer bitmask."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsHome">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if the AI is at their home location."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsInCombat">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if self is in combat."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsKiller">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if AI is killer."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsResting">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Composite" name="CheckIsStalker">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsStationary">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks the agent to see if the have the creature flag STATIONARY."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsSwimming">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckIsType">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check the target prospect against the type specified."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="NPCTYPE" available="NPCTYPE;MONSTERTYPE;DROIDTYPE;ANDROIDTYPE;HUMANOIDTYPE" description=""/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckMovementState">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if follow state is the same as condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="OBLIVIOUS" available="OBLIVIOUS;WATCHING;STALKING;FOLLOWING;PATROLLING;FLEEING;LEASHING;EVADING;PATHING_HOME;FOLLOW_FORMATION;MOVING_TO_HEAL;NOTIFY_ALLY;CRACKDOWN_SCANNING;RESTING;CONVERSING;LAIR_HEALING" description="Follow state enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckOutdoors">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if self is outdoors (does not have a parent)."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckOwnerInRange">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if  pet owner is in given range."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="float" name="condition" default="128.0" description=""/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckPendingHarvestTarget">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checkfs for pending harvest target stored on the blackboard;"/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckPetCommand">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks the last command given to self was condition. Returns false if self is not a pet."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="PET_FOLLOW" available="PET_FOLLOW;PET_STORE;PET_ATTACK;PET_GUARD;PET_FRIEND;PET_FOLLOWOTHER;PET_TRICK1;PET_TRICK2;PET_PATROL;PET_FORMATION1;PET_FORMATION2;PET_SPECIAL_ATTACK1;PET_SPECIAL_ATTACK2;PET_RANGED_ATTACK;PET_GROUP;PET_STAY;PET_RECHARGEOTHER;PET_TRANSFER;PET_THROW" description="Pet command enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckPosture">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if postures is the same as condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="UPRIGHT" available="INVALID;UPRIGHT;CROUCHED;PRONE;SNEAKING;BLOCKING;CLIMBING;FLYING;LYINGDOWN;SITTING;SKILLANIMATING;DRIVINGVEHICLE;RIDINGCREATURE;KNOCKEDDOWN;INCAPACITATED;DEAD" description="Posture enumerations."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectAggression">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if prospective target (targetProspect on blackboard) is aggressive to self."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectBackAggression">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if targetProspect on blackboard is aggressive to self (always true is targetProspect is a player)."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectFacing">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if targetProspect on blackboard is facing self (currently no checks on type of targetProspect)."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectInRange">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns SUCCESS if the prospective target (targetProspect on blackboard) is in condition range. If condition is less than 0, use the aggroMod on the blackboard to calculate a default aggro radius."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="float" name="condition" description="Check distance for destination."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectIsCommand">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks that targetProspect on blackboard is the target of the last command given. Returns false if self is not a pet."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectIsIncapacitated">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if prospect is incapacitated."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectIsType">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check the target prospect against the type specified."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="PLAYERTYPE" available="PLAYERTYPE;CREATURETYPE;NPCTYPE;TANGIBLETYPE;AGENTTYPE" description=""/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectJediTrial">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Check that the player is on the appropriate jedi trial. Very specific use."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectLOS">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if self has line of sight to targetProspect on blackboard."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectLevel">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if self level times aggroMod on blackboard is less than level of targetProspect on blackboard."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckProspectSpeed">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks to see if targetProspect on blackboard has speed above condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" default="STATIONARY" available="STATIONARY;SLOW;FAST" description="Speed to be above."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckQueueSize">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Returns true if the queue size is &gt;= passed variable."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckRandomLevel">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Randomly gets a number between 0 and self level and checks if it is less than condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="int" name="condition" description="Level to check below."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckRetreat">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if a retreat can be done, where condition is the range that the follow object or self (if no follow object) must be away from the home location."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="int" name="condition" description="Range to be away from home location before retreating."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckShouldRest">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if the AI has rested recently."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckSpeed">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks to see if speed is above condition."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="float" name="condition" description="Speed to be above."/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckStopResting">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if time has passed to stop resting. "/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckTargetInOwnerRange">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if pet prospect target is in range of owner."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="float" name="condition" default="128.0" description=""/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckTargetIsValid">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks that the proposed target (targetProspect on the blackboard) is valid."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckUseRanged">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="Checks if pet has the use ranged weapon toggled on."/>
      <shape name="diamond"/>
      <events/>
    </node>
    <!---->
    <node class="Condition" type="Single" name="CheckWeaponIsRanged">
      <children class="Task" use="no"/>
      <children class="Condition" use="yes"/>
      <description text="New node created by user."/>
      <shape name="diamond"/>
      <events/>
      <attribute type="text" name="condition" description=""/>
    </node>
    <!---->
    <!-- ********************************************************************************************************* -->
  </library>
  <!-- ====================================================================================================================== -->
</LibData>
